#!/usr/bin/env python

# Author: Eric Kow
# License: BSD3

"""
Example script using the library to dump the output from the
Stanford CoreNLP pipeline
"""

import argparse
from educe      import stac, util
from educe.stac import corenlp

# ---------------------------------------------------------------------
# args
# ---------------------------------------------------------------------

arg_parser = argparse.ArgumentParser(description='Dump EDU text' )
arg_parser.add_argument('idir', metavar='DIR',
                        help='Input directory'
                        )
arg_parser.add_argument('data_dir', metavar='DIR',
                        help='CoreNLP outputs'
                        )
educe_group = arg_parser.add_argument_group('Corpus filtering')
util.add_corpus_filters(educe_group, fields=[ 'doc', 'subdoc' ])
args=arg_parser.parse_args()
args.stage     = 'unannotated'
args.annotator = None
is_interesting=util.mk_is_interesting(args)

# ---------------------------------------------------------------------
# main
# ---------------------------------------------------------------------

reader     = stac.Reader(args.idir)
anno_files = reader.filter(reader.files(), is_interesting)
corpus     = reader.slurp(anno_files, verbose=True)
parses     = corenlp.read_results(corpus, args.data_dir)

def show_mention(doc, mention):
    span = mention.text_span()
    return doc.text(span) + ' ' + str(span)

for k in parses:
    doc   = corpus[k]
    turns = sorted(filter(stac.is_turn, doc.units), key=lambda k:k.span)
    trees = parses[k].trees
    dtrees = parses[k].deptrees
    chains = parses[k].chains

    if len(turns) != len(trees):
        raise Exception('Ack! Mismatch in length of turns (%d) and trees (%d)')

    for turn, tree, dtree in zip(turns, trees, dtrees):
        tree_text = doc.text(tree.span)
        turn_text = doc.text(turn.span)
        padding   = ' ' * (tree.span.char_start - turn.span.char_start)
        print '%s\t%s' % (turn.span, turn_text)
        print '%s\t%s' % (tree.span, padding + tree_text)
        print tree
        print dtree
        print '--'
    for ctr, chain in enumerate(chains):
        mentions = [show_mention(doc,m) for m in chain.mentions]
        print 'chain', ctr, '\t', '; '.join(mentions)
    print '------------------------------------------'
