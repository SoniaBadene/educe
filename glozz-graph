#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Author: Eric Kow
# License: BSD3

"""
Example script using the library to dump graphs for all files
in a STAC corpus
"""

from educe import glozz, corpus, stac, util, graph
import argparse
import copy
import re
import os.path
import sys
import textwrap

from pygraph.readwrite import dot
import pydot

# ---------------------------------------------------------------------
# args
# ---------------------------------------------------------------------

arg_parser = argparse.ArgumentParser(description='Visualise discourse graphs.')
arg_parser.add_argument( 'idir', metavar='DIR'
                       , help='Input directory'
                       )
arg_parser.add_argument( 'odir', metavar='DIR'
                       , help='Output directory'
                       )
arg_parser.add_argument('--png'
                       , action='store_const'
                       , const=True
                       , default=False
                       , help='Create png files (can be slow)'
                       )
util.add_corpus_filters(arg_parser, fields=[ 'doc', 'subdoc', 'annotator' ])
args=arg_parser.parse_args()
args.stage = 'discourse|units'
is_interesting=util.mk_is_interesting(args)

# ---------------------------------------------------------------------
# main
# ---------------------------------------------------------------------

reader     = stac.Reader(args.idir)
anno_files = reader.filter(reader.files(), is_interesting)
corpus     = reader.slurp(anno_files, verbose=True)

def write_dot_graph(doc_file, dot_graph):
    doc_dir        = os.path.dirname(doc_file)
    ofile_dirname  = os.path.join(args.odir,os.path.relpath(doc_dir, args.idir))
    ofile_basename = os.path.splitext(os.path.basename(doc_file))[0]
    dot_file       = os.path.join(ofile_dirname, ofile_basename + '.dot')
    png_file       = os.path.join(ofile_dirname, ofile_basename + '.png')
    if not os.path.exists(ofile_dirname):
        os.makedirs(ofile_dirname)
    with open(dot_file, 'w') as f: print >> f, dot_graph.to_string()
    if args.png:
        print >> sys.stderr, "Creating %s" % png_file
        os.system('dot -T png -o %s %s' % (png_file, dot_file))

for doc_key in [ k for k in corpus if k.stage == 'discourse' ]:
    doc      = corpus[doc_key]
    doc_file = anno_files[doc_key][0]
    try:
        g = graph.Graph(corpus, doc_key, doc)
        write_dot_graph(doc_file, g.to_dot())
    except graph.DuplicateIdException:
        warning  = "WARNING: %s has duplicate annotation ids" % doc_file
        print >> sys.stderr, warning


# vim: syntax=python:
