#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Author: Eric Kow
# License: BSD3

"""
Example script using the library to dump graphs for all files
in a STAC corpus
"""

from educe import glozz, corpus, stac, util, graph
import educe.corpus
import educe.stac.graph as stacgraph

import argparse
import copy
import re
import os.path
import sys
import textwrap
import collections
import codecs

from pygraph.readwrite import dot
from pygraph.algorithms import accessibility
import pydot

# ---------------------------------------------------------------------
# args
# ---------------------------------------------------------------------

arg_parser = argparse.ArgumentParser(description='Visualise discourse graphs.')
arg_parser.add_argument('idir', metavar='DIR',
                        help='Input directory')
arg_parser.add_argument('odir', metavar='DIR',
                        help='Output directory')
arg_parser.add_argument('--no-png', action='store_true',
                        help='Skip png file creation')
arg_parser.add_argument('--live', action='store_true',
                        help='Input is a flat collection of aa/ac files)')
arg_parser.add_argument('--split', action='store_true',
                        help='Separate file for each connected component')
educe_group = arg_parser.add_argument_group('corpus filtering arguments')
util.add_corpus_filters(educe_group, fields=[ 'doc', 'subdoc', 'annotator' ])
args=arg_parser.parse_args()
args.stage = 'discourse|units'
is_interesting=util.mk_is_interesting(args)

# ---------------------------------------------------------------------
# main
# ---------------------------------------------------------------------

if args.live:
    reader     = stac.LiveInputReader(args.idir)
    anno_files = reader.files()
    corpus     = reader.slurp(anno_files, verbose=True)
else:
    reader     = stac.Reader(args.idir)
    anno_files = reader.filter(reader.files(), is_interesting)
    corpus     = reader.slurp(anno_files, verbose=True)

def write_dot_graph(doc_file, dot_graph, part=None):
    doc_dir        = os.path.dirname(doc_file)
    ofile_dirname  = os.path.join(args.odir,os.path.relpath(doc_dir, args.idir))
    ofile_basename = os.path.splitext(os.path.basename(doc_file))[0]
    if part is not None:
        ofile_basename += '_' + str(part)
    dot_file       = os.path.join(ofile_dirname, ofile_basename + '.dot')
    png_file       = os.path.join(ofile_dirname, ofile_basename + '.png')
    if not os.path.exists(ofile_dirname):
        os.makedirs(ofile_dirname)
    with codecs.open(dot_file, 'w', encoding='utf-8') as f:
        print >> f, dot_graph.to_string()
    if not args.no_png:
        print >> sys.stderr, "Creating %s" % png_file
        os.system('dot -T png -o %s %s' % (png_file, dot_file))

if args.live:
    keys = corpus
else:
    keys = filter(lambda k:k.stage == 'discourse', corpus)

for doc_key in sorted(keys):
    doc_file = anno_files[doc_key][0]
    try:
        g = stacgraph.Graph.from_doc(corpus, doc_key)
        dot_g = stacgraph.DotGraph(g)
        if dot_g.get_nodes():
            write_dot_graph(doc_file, dot_g)
            if args.split:
                ccs = g.connected_components()
                for k,nodes in enumerate(ccs,1):
                    g2 = g.copy(nodes)
                    write_dot_graph(doc_file, stacgraph.DotGraph(g2), part=k)
        else:
            print >> sys.stderr, "Skipping %s (empty graph)" % doc_file
    except graph.DuplicateIdException:
        warning  = "WARNING: %s has duplicate annotation ids" % doc_file
        print >> sys.stderr, warning


# vim: syntax=python:
