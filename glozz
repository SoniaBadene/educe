#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Author: Eric Kow
# License: BSD3

"""
Swiss-army-knife for working with glozz files
"""

from educe import glozz, corpus, stac, util, graph
import educe.corpus
import educe.stac.graph as stacgraph

import argparse
import copy
import re
import os.path
import sys
import textwrap
import collections
import codecs

import educe.glozz      as glozz
from educe.annotation import Span, Unit

# ---------------------------------------------------------------------
# utility functions
# ---------------------------------------------------------------------

def seek_ac_file(aa_file):
    fbase,fext = os.path.splitext(aa_file)
    if fext is None:
        ac_file = None
    else:
        ac_file = fbase + ".ac"
    return ac_file

# ---------------------------------------------------------------------
# dump
# ---------------------------------------------------------------------

def dump(filename, doc):
    show_unit = lambda u:"%s | %s" % (u, doc.text_for(u))
    lines = ['############### %s units' % filename]\
          + map(show_unit, doc.units)\
          + ['############### %s relations' % filename]\
          + map(str, doc.relations)
    return "\n".join(lines)

def main_dump(args):
    for file in args.files:
        ac_file = seek_ac_file(file)
        doc = glozz.read_annotation_file(file,ac_file)
        print dump(file, doc).encode('utf-8')
        print ""

# ---------------------------------------------------------------------
# cut
# ---------------------------------------------------------------------

def cut_glozz_file(file, span, offset=0):
    ac_file = seek_ac_file(file)
    doc = glozz.read_annotation_file(file,ac_file)
    def shift(x):
        if offset != 0 and isinstance(x, Unit):
            x2      = copy.copy(x)
            x2.span = x.span.shift(offset)
            return x2
        else:
            return x
    def slice(xs):
        return [ shift(x) for x in xs if span.encloses(x.text_span()) ]
    doc2 = copy.copy(doc)
    doc2.units     = slice(doc.units)
    doc2.schemas   = slice(doc.schemas)
    doc2.relations = slice(doc.relations)
    return doc2

def main_cut(args):
    span = Span(args.start, args.end)
    doc  = cut_glozz_file(args.input, span, args.shift)
    glozz.write_annotation_file(args.output, doc)


# ---------------------------------------------------------------------
# hashcode
# ---------------------------------------------------------------------

def main_hashcode(args):
    print glozz.hashcode(args.input)


# ---------------------------------------------------------------------
# args
# ---------------------------------------------------------------------

arg_parser = argparse.ArgumentParser(description='Glozz Swiss Army Knife')
subparsers = arg_parser.add_subparsers(help='sub-command help')

ap_dump = subparsers.add_parser('dump', help='Dump glozz file in an ad-hoc debug format')
ap_dump.set_defaults(func=main_dump)
ap_dump.add_argument('files', nargs='*')

ap_cut = subparsers.add_parser('cut', help='Select a slice of glozz anotations from text span')
ap_cut.add_argument('input', metavar='FILE', help='Glozz aa file')
ap_cut.add_argument('--shift', type=int, nargs='?',
                    default=0,
                    help='shift spans by this offset (default 0; unspecified:1-start)')
ap_cut.add_argument('start', type=int,
                    help='Character offset of left of included window')
ap_cut.add_argument( 'end', type=int,
                    help='Character offset of right of included window')
ap_cut.add_argument('output', metavar='FILE',
                    help='Output file')
ap_cut.set_defaults(func=main_cut)

ap_hashcode = subparsers.add_parser('hashcode', help='Print corpus hashcode for Glozz ac file')
ap_hashcode.add_argument('input', metavar='FILE', help='Glozz ac file')
ap_hashcode.set_defaults(func=main_hashcode)

args = arg_parser.parse_args()
if args.shift is None:  # NB: not the same as 0!
    args.shift = 1 - args.start
args.func(args)

# vim: syntax=python:
